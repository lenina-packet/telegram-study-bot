import asyncio
import random
import gspread
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import PollAnswer
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

TOKEN = "YOUR_BOT_TOKEN"
ADMIN_USER_ID = 704617782

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("bot_credentials.json", scope)
client = gspread.authorize(creds)
spreadsheet = client.open("Bot")
tests_sheet = spreadsheet.worksheet("–¢–µ—Å—Ç—ã")
rating_sheet = spreadsheet.worksheet("–†–µ–π—Ç–∏–Ω–≥")
news_sheet = spreadsheet.worksheet("–†–∞—Å—Å—ã–ª–∫–∏")

# Bot and dispatcher setup
session = AiohttpSession()
bot = Bot(token=TOKEN, session=session)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# Active tests
active_tests = {}

async def update_user_score(user_id, username, score):
    user_ids = rating_sheet.col_values(1)
    if str(user_id) in user_ids:
        row_index = user_ids.index(str(user_id)) + 1
        current_score = int(rating_sheet.cell(row_index, 3).value)
        rating_sheet.update_cell(row_index, 3, current_score + score)
    else:
        rating_sheet.append_row([str(user_id), username, score])

async def send_random_test(user_id, username):
    rows = tests_sheet.get_all_values()
    test_numbers = list(set(row[0] for row in rows[1:]))

    if user_id in active_tests:
        await bot.send_message(user_id, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ.")
        return

    if not test_numbers:
        await bot.send_message(user_id, "–ü–æ–∫–∞ –∑–∞–¥–∞—á–µ–∫ –Ω–µ—Ç—É, –∂–¥–∏, –ø–æ–∫–∞ —è –ø—Ä–∏–¥—É–º–∞—é –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ!")
        return

    test_number = random.choice(test_numbers)
    test_questions = [row for row in rows if row[0] == test_number]
    random.shuffle(test_questions)

    active_tests[user_id] = {
        "questions": test_questions,
        "correct_answers": 0,
        "answered": 0,
        "username": username,
        "waiting_for_answer": False
    }
    await send_question(user_id)

async def send_question(user_id):
    test_data = active_tests.get(user_id)
    if not test_data or test_data["answered"] >= 6:
        await finish_test(user_id)
        return

    if test_data["waiting_for_answer"]:
        return

    test_data["waiting_for_answer"] = True
    question_data = test_data["questions"][test_data["answered"]]
    question_text = question_data[1]
    answers = question_data[2:]
    correct_answer = question_data[5]
    random.shuffle(answers)
    correct_index = answers.index(correct_answer)
    test_data["correct_index"] = correct_index

    await bot.send_poll(
        user_id, question_text, answers, type="quiz",
        correct_option_id=correct_index
    )

@router.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    user_id = poll_answer.user.id
    test_data = active_tests.get(user_id)
    if not test_data or not test_data["waiting_for_answer"]:
        return

    test_data["waiting_for_answer"] = False
    test_data["answered"] += 1

    if poll_answer.option_ids[0] == test_data["correct_index"]:
        test_data["correct_answers"] += 1

    await send_question(user_id)

async def finish_test(user_id):
    test_data = active_tests.pop(user_id, None)
    if not test_data:
        return

    score = test_data["correct_answers"] + 1  
    await update_user_score(user_id, test_data["username"], score)

    levels = ["–ù–æ–≤–∏—á–æ–∫ (–î–∂—É–Ω–∏–æ—Ä)", "–°—Ä–µ–¥–Ω—è—á–æ–∫ (–ú–∏–¥–ª)", "–°—Ä–µ–¥–Ω–µ-–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–ú–∏–¥–ª+)", "–°–µ–Ω—å–æ—Ä"]
    level = levels[min(score // 2, 3)]
    
    if level in ["–°—Ä–µ–¥–Ω–µ-–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–ú–∏–¥–ª+)", "–°–µ–Ω—å–æ—Ä"]:
        result_text = "–¢—ã –º–æ–ª–æ–¥–µ—Ü! ..."  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    else:
        result_text = f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {score}/8. –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level} ü´°\n\n"  # –¢–µ–∫—Å—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π

    await bot.send_message(user_id, result_text)

@router.message(Command("start"))
async def start_command(message: types.Message):
    await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")

@router.message(Command("test"))
async def test_command(message: types.Message):
    await send_random_test(message.from_user.id, message.from_user.username)

async def update_flag_in_sheet():
    rows = news_sheet.get_all_values()
    for row_index, row in enumerate(rows[1:], start=2):  
        text, date_str, send_flag = row[0], row[1], row[2]
        
        if send_flag.lower() == 'false' and datetime.strptime(date_str, "%d.%m.%Y").date() == datetime.today().date():
            news_sheet.update_cell(row_index, 3, 'TRUE')
            return row  

    return None  

async def send_newsletter():
    row = await update_flag_in_sheet()
    
    if row is not None:
        text, date, send_flag = row[0], row[1], row[2]
        users = rating_sheet.col_values(1)  

        for user in users:
            try:
                await bot.send_message(user, text)
                await asyncio.sleep(0.5)  
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
                
        return "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    else:
        return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."

@router.message(Command("send_newsletter"))
async def send_newsletter_command(message: types.Message):
    if message.from_user.id != ADMIN_USER_ID:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    result = await send_newsletter()
    await bot.send_message(message.from_user.id, result)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
