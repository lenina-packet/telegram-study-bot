import asyncio
import random
import gspread
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import PollAnswer
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

TOKEN = "7642749376:AAGcsopXgQx0hWMcFVMLG8Cv0VEWYsUS9kc"
ADMIN_USER_ID = 704617782

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("botinfavikusya-52fbe758c9b8.json", scope)
client = gspread.authorize(creds)
spreadsheet = client.open("Bot")
tests_sheet = spreadsheet.worksheet("–¢–µ—Å—Ç—ã")
rating_sheet = spreadsheet.worksheet("–†–µ–π—Ç–∏–Ω–≥")
news_sheet = spreadsheet.worksheet("–†–∞—Å—Å—ã–ª–∫–∏")

session = AiohttpSession()
bot = Bot(token=TOKEN, session=session)
dp = Dispatcher()
router = Router()
dp.include_router(router)

active_tests = {}

async def update_user_score(user_id, username, score, test_number):
    user_ids = rating_sheet.col_values(1)
    if str(user_id) in user_ids:
        row_index = user_ids.index(str(user_id)) + 1
        current_score = int(rating_sheet.cell(row_index, 3).value)
        completed_tests = rating_sheet.cell(row_index, 4).value  
        
        if completed_tests:
            completed_tests = completed_tests.split(", ")
            if test_number not in completed_tests:
                completed_tests.append(test_number)
        else:
            completed_tests = [test_number]
        

        rating_sheet.update_cell(row_index, 3, current_score + score)
        rating_sheet.update_cell(row_index, 4, ", ".join(completed_tests))
    else:
        rating_sheet.append_row([str(user_id), username, score, test_number])

async def send_random_test(user_id, username):
    rows = tests_sheet.get_all_values()
    test_numbers = list(set(row[0] for row in rows[1:]))

    user_ids = rating_sheet.col_values(1)
    completed_tests = []

    if str(user_id) in user_ids:
        row_index = user_ids.index(str(user_id)) + 1
        completed_tests = rating_sheet.cell(row_index, 4).value
        if completed_tests:
            completed_tests = completed_tests.split(", ")
        else:
            completed_tests = []

    available_tests = [t for t in test_numbers if t not in completed_tests]

    if not available_tests:
        await bot.send_message(user_id, "–¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã! –ü–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ —è –∑–∞–ª—å—é –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∫–∏ –∫ —Ç–µ—Å—Ç–∏–∫–∞–º üòä")
        return

    test_number = random.choice(available_tests)
    test_questions = [row for row in rows if row[0] == test_number]
    random.shuffle(test_questions)

    active_tests[user_id] = {
        "questions": test_questions,
        "correct_answers": 0,
        "answered": 0,
        "username": username,
        "waiting_for_answer": False,
        "test_number": test_number  
    }
    await send_question(user_id)

async def send_question(user_id):
    test_data = active_tests.get(user_id)
    if not test_data or test_data["answered"] >= 8:
        await finish_test(user_id)
        return

    test_data["waiting_for_answer"] = True

    question_data = test_data["questions"][test_data["answered"]]
    question_text = question_data[1]  # –í–æ–ø—Ä–æ—Å
    answers = question_data[2:]  # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    correct_answer = question_data[5]  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    random.shuffle(answers)
    correct_index = answers.index(correct_answer)

    test_data["correct_index"] = correct_index

    poll = await bot.send_poll(
        user_id, question_text, answers, type="quiz",
        correct_option_id=correct_index, open_period=60, is_anonymous=False
    )

    test_data["poll_id"] = poll.poll.id

    asyncio.create_task(wait_for_answer(user_id, 60))

async def wait_for_answer(user_id, delay):
    """–ñ–¥–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."""
    await asyncio.sleep(delay)
    test_data = active_tests.get(user_id)

    if test_data and test_data["waiting_for_answer"]:  
        test_data["waiting_for_answer"] = False  
        test_data["answered"] += 1
        await send_question(user_id)  

@router.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    user_id = poll_answer.user.id
    test_data = active_tests.get(user_id)

    if not test_data or not test_data["waiting_for_answer"]:
        return 

    test_data["waiting_for_answer"] = False  
    test_data["answered"] += 1

    if poll_answer.option_ids[0] == test_data["correct_index"]:
        test_data["correct_answers"] += 1

    await send_question(user_id)  

async def finish_test(user_id):
    test_data = active_tests.pop(user_id, None)
    if not test_data:
        return

    score = test_data["correct_answers"]
    await update_user_score(user_id, test_data["username"], score, test_data["test_number"])

    levels = ["–ù–æ–≤–∏—á–æ–∫ (–î–∂—É–Ω–∏–æ—Ä)", "–°—Ä–µ–¥–Ω—è—á–æ–∫ (–ú–∏–¥–ª)", "–°—Ä–µ–¥–Ω–µ-–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–ú–∏–¥–ª+)", "–°–µ–Ω—å–æ—Ä"]
    level = levels[min(score // 2, 3)]  # –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ –±–∞–ª–ª–∞–º

    if level in ["–°—Ä–µ–¥–Ω–µ-–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–ú–∏–¥–ª+)", "–°–µ–Ω—å–æ—Ä"]:
        result_text = (f"–¢—ã –º–æ–ª–æ–¥–µ—Ü! –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {score}/8. –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level} \n\n" 
                       "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ —É–∂–µ —Å–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞—Ç—å –≤—É–∑, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –±—é–¥–∂–µ—Ç üî•\n\n"
                       "–õ–æ–≤–∏ —Ñ–∞–π–ª–∏–∫–∏ —Å —Ç–æ–ø–æ–≤—ã–º–∏ –≤—É–∑–∞–º–∏: ‚¨áÔ∏è\n"
                       "[–ß–µ–∫-–ª–∏—Å—Ç –ø–æ –≤—É–∑–∞–º –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞!](https://t.me/infa_vikusya/6041) \n"
                       "[–ß–µ–∫-–ª–∏—Å—Ç –ø–æ –≤—É–∑–∞–º –ú–æ—Å–∫–≤—ã!](https://t.me/infa_vikusya/6147) \n\n"
                       "–ù–∞–¥–µ—é—Å—å, —á—Ç–æ –≤ —ç—Ç–∏—Ö —Ñ–∞–π–ª–∏–∫–∞—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–≤–æ–π –≤—É–∑ –º–µ—á—Ç—ã ‚ù§Ô∏è\n\n"
                       "‚û°Ô∏è [–ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ –º–Ω–æ–π](http://t.me/predbanmanager_bot?start=telegramlanskayaopis3202501)\n"
                       "‚û°Ô∏è [–ë–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —É –º–µ–Ω—è –Ω–∞ –∫—É—Ä—Å–∞—Ö](http://t.me/predbanmanager_bot?start=telegramlanskayaopis3202501)")
    else:
        result_text = (f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {score}/8. –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level} ü´°\n\n"
                   "–î–æ –ï–ì–≠ –æ—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ä—É –º–µ—Å—è—Ü–µ–≤, –∞ —Ç–≤–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –±—é–¥–∂–µ—Ç –æ—Ç —Ç–µ–±—è —É–±–µ–≥–∞–µ—Ç! –î–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –∑–∞ 2 –º–µ—Å—è—Ü–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –Ω–∞ 80+ –±–∞–ª–ª–æ–≤ üê∏\n\n"
                   "–ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫—É—Ä—Å –§–õ–ï–® –§–∏–Ω–∞–ª, –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ —è —Å–æ–±—Ä–∞–ª–∞ –≤—Å–µ —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –∏ –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è\n\n"
                   "–ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –≤—ã—à–µ —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞ ‚§¥Ô∏è\n\n"
                   "–ö–∞–∫ —è —Å–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–±—è –Ω–∞ 80+ –±–∞–ª–ª–æ–≤?\n\n"
                   "–Ø –ø—Ä–µ–ø–æ–¥–∞—é —É–∂–µ –±–æ–ª–µ–µ 6 –ª–µ—Ç, –≤—ã–ø—É—Å—Ç–∏–ª–∞ 33 120 —É—á–µ–Ω–∏–∫–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º 83,34, –≤ —Ç–æ –≤—Ä–µ–º—è, –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 54,3 üöÄ\n\n"
                   "–ê —Ç–∞–∫–∂–µ –ö–ê–ñ–î–´–ô –î–ï–°–Ø–¢–´–ô –°–¢–û–ë–ê–õ–õ–¨–ù–ò–ö –ø–æ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ —É—á–∏–ª—Å—è —É –º–µ–Ω—è üî•\n\n"
                   "‚û°Ô∏è [–ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–≤–æ–¥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏](http://t.me/predbanmanager_bot?start=telegramlanskayaopis3202501)\n"
                   "‚û°Ô∏è [–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å –§–õ–ï–® –§–∏–Ω–∞–ª –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç 8/8](http://t.me/predbanmanager_bot?start=telegramlanskayaopis3202501)")
    
    image_url = "https://i.imgur.com/tjP9i5X.jpeg"  
    await bot.send_photo(user_id, image_url, caption=result_text, parse_mode="Markdown")

@router.message(Command("start"))
async def start_command(message: types.Message):
    welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã –∏ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç."
    await bot.send_message(message.from_user.id, welcome_text)

@router.message(Command("test"))
async def test_command(message: types.Message):
    await send_random_test(message.from_user.id, message.from_user.username)

async def update_flag_in_sheet():
    rows = news_sheet.get_all_values()
    for row_index, row in enumerate(rows[1:], start=2): 
        text, date_str, send_flag = row[0], row[1], row[2]

        if send_flag.lower() == 'false' and datetime.strptime(date_str, "%d.%m.%Y").date() == datetime.today().date():
            news_sheet.update_cell(row_index, 3, 'TRUE')
            return row  

    return None  

async def send_newsletter():
    row = await update_flag_in_sheet()
    
    if row is not None:
        text, date, send_flag = row[0], row[1], row[2]
        
        users = rating_sheet.col_values(1) 

        for user in users:
            try:
                await bot.send_message(user, text)
                await asyncio.sleep(0.5) 
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
                
        return "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    else:
        return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."

@router.message(Command("send_newsletter"))
async def send_newsletter_command(message: types.Message):

    if message.from_user.id != ADMIN_USER_ID:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    result = await send_newsletter()

    await bot.send_message(message.from_user.id, result)

async def main():
    dp.poll_answer.register(handle_poll_answer)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
